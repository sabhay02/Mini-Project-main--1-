import mongoose from 'mongoose';

// Helper function to generate a unique ID portion (safer than relying on count)
function generateUniqueIdPortion(prefix) {
    const timestamp = Date.now().toString(36).slice(-4); // Last 4 chars of timestamp
    const randomPart = Math.random().toString(36).substring(2, 6); // 4 random chars
    return `${prefix}-${timestamp}${randomPart}`.toUpperCase();
}

const grievanceSchema = new mongoose.Schema({
Â  grievanceId: {
Â  Â  type: String,
Â  Â  unique: true,
Â  Â  required: true
Â  },
Â  user: {
Â  Â  type: mongoose.Schema.Types.ObjectId,
Â  Â  ref: 'User',
Â  Â  required: true
Â  },
Â  category: {
Â  Â  type: String,
Â  Â  required: [true, 'Please specify grievance category'],
Â  Â  enum: [
Â  Â  Â  'water_supply',
Â  Â  Â  'electricity',
Â  Â  Â  'road_repair',
Â  Â  Â  'street_lights',
Â  Â  Â  'drainage',
Â  Â  Â  'garbage_collection',
Â  Â  Â  'healthcare',
Â  Â  Â  'education',
Â  Â  Â  'corruption',
Â  Â  Â  'other'
Â  Â  ]
Â  },
Â  subCategory: String,
Â  title: {
Â  Â  type: String,
Â  Â  required: [true, 'Please provide grievance title'],
Â  Â  trim: true,
Â  Â  maxlength: [100, 'Title cannot be more than 100 characters']
Â  },
Â  description: {
Â  Â  type: String,
Â  Â  required: [true, 'Please provide detailed description'],
Â  Â  trim: true,
Â  Â  maxlength: [2000, 'Description cannot be more than 2000 characters']
Â  },
Â  status: {
Â  Â  type: String,
Â  Â  enum: ['open', 'in_progress', 'resolved', 'closed', 'rejected'],
Â  Â  default: 'open'
Â  },
Â  priority: {
Â  Â  type: String,
Â  Â  enum: ['low', 'medium', 'high', 'urgent'],
Â  Â  default: 'medium'
Â  },
Â  severity: {
Â  Â  type: String,
Â  Â  enum: ['minor', 'moderate', 'severe', 'critical'],
Â  Â  default: 'moderate'
Â  },
Â  location: {
Â  Â  address: String,
Â  Â  village: String,
Â  Â  district: String,
Â  Â  state: String,
Â  Â  pincode: String,
Â  Â  coordinates: {
Â  Â  Â  latitude: Number,
Â  Â  Â  longitude: Number
Â  Â  }
Â  },
Â  attachments: [{
Â  Â  name: String,
Â  Â  url: String,
Â  Â  type: String,
Â  Â  size: Number,
Â  Â  uploadedAt: {
Â  Â  Â  type: Date,
Â  Â  Â  default: Date.now
Â  Â  }
Â  }],
Â  assignedTo: {
Â  Â  type: mongoose.Schema.Types.ObjectId,
Â  Â  ref: 'User'
Â  },
Â  assignedDepartment: {
Â  Â  type: String,
Â  Â  enum: [
Â  Â  Â  'public_works',
Â  Â  Â  'water_supply',
Â  Â  Â  'electricity',
Â  Â  Â  'health',
Â  Â  Â  'education',
Â  Â  Â  'sanitation',
Â  Â  Â  'administration',
Â  Â  Â  'other'
Â  Â  ]
Â  },
Â  timeline: [{
Â  Â  status: String,
Â  Â  comment: String,
Â  Â  updatedBy: {
Â  Â  Â  type: mongoose.Schema.Types.ObjectId,
Â  Â  Â  ref: 'User'
Â  Â  },
Â  Â  timestamp: {
Â  Â  Â  type: Date,
Â  Â  Â  default: Date.now
Â  Â  },
Â  Â  attachments: [String]
Â  }],
Â  resolution: {
Â  Â  description: String,
Â  Â  actions: [String],
Â  Â  completedBy: {
Â  Â  Â  type: mongoose.Schema.Types.ObjectId,
Â  Â  Â  ref: 'User'
Â  Â  },
Â  Â  completedAt: Date,
Â  Â  verificationRequired: {
Â  Â  Â  type: Boolean,
Â  Â  Â  default: false
Â  Â  },
Â  Â  verificationStatus: {
Â  Â  Â  type: String,
Â  Â  Â  enum: ['pending', 'verified', 'rejected'],
Â  Â  Â  default: 'pending'
Â  Â  }
Â  },
Â  feedback: {
Â  Â  rating: {
Â  Â  Â  type: Number,
Â  Â  Â  min: 1,
Â  Â  Â  max: 5
Â  Â  },
Â  Â  comment: String,
Â  Â  submittedAt: Date
Â  },
Â  estimatedResolutionTime: {
Â  Â  type: Number, // in days
Â  Â  default: 7
Â  },
Â  actualResolutionTime: Number, // in days
Â  submissionDate: {
Â  Â  type: Date,
Â  Â  default: Date.now
Â  },
Â  lastUpdated: {
Â  Â  type: Date,
Â  Â  default: Date.now
Â  },
Â  resolutionDate: Date,
Â  isPublic: {
Â  Â  type: Boolean,
Â  Â  default: false
Â  },
Â  anonymous: {
Â  Â  type: Boolean,
Â  Â  default: false
Â  },
Â  metadata: {
Â  Â  source: {
Â  Â  Â  type: String,
Â  Â  Â  enum: ['web', 'mobile', 'admin', 'phone'],
Â  Â  Â  default: 'web'
Â  Â  },
Â  Â  ipAddress: String,
Â  Â  userAgent: String
Â  }
}, {
Â  timestamps: true
});

// Indexes for better performance
grievanceSchema.index({ user: 1, createdAt: -1 });
grievanceSchema.index({ status: 1 });
grievanceSchema.index({ category: 1 });
grievanceSchema.index({ priority: 1 });
grievanceSchema.index({ grievanceId: 1 });
grievanceSchema.index({ assignedTo: 1 });
grievanceSchema.index({ 'location.village': 1 });
grievanceSchema.index({ 'location.district': 1 });
// Index for full-text search capability
grievanceSchema.index({ title: 'text', description: 'text' }); 

// ðŸ›‘ CORRECTION: Replaced prone-to-race-condition pre('save') ID generation 
// with a safer method using a unique random hash.
grievanceSchema.pre('save', function(next) {
Â  if (this.isNew && !this.grievanceId) {
Â  Â  // Use the safer ID generation utility
Â  Â  this.grievanceId = generateUniqueIdPortion('GRV');
Â  }
Â  next();
});

// Update lastUpdated on save
grievanceSchema.pre('save', function(next) {
    // Only update if it's a modification, not just if the ID was set above
    if (this.isModified()) {
        this.lastUpdated = new Date();
    }
    next();
});

// Virtual for status display
grievanceSchema.virtual('statusDisplay').get(function() {
Â  const statusMap = {
Â  Â  'open': 'Open',
Â  Â  'in_progress': 'In Progress',
Â  Â  'resolved': 'Resolved',
Â  Â  'closed': 'Closed',
Â  Â  'rejected': 'Rejected'
Â  };
Â  return statusMap[this.status] || this.status;
});

// Virtual for priority display
grievanceSchema.virtual('priorityDisplay').get(function() {
Â  const priorityMap = {
Â  Â  'low': 'Low',
Â  Â  'medium': 'Medium',
Â  Â  'high': 'High',
Â  Â  'urgent': 'Urgent'
Â  };
Â  return priorityMap[this.priority] || this.priority;
});

// Virtual for resolution time remaining
grievanceSchema.virtual('resolutionTimeRemaining').get(function() {
Â  if (this.status === 'resolved' || this.status === 'closed') {
Â  Â  return 0;
Â  }
Â  
Â  const daysSinceSubmission = Math.floor(
Â  Â  (new Date().getTime() - this.submissionDate.getTime()) / (1000 * 60 * 60 * 24)
Â  );
Â  
Â  return Math.max(0, this.estimatedResolutionTime - daysSinceSubmission);
});

// Method to add timeline update
grievanceSchema.methods.addTimelineUpdate = function(status, comment, updatedBy, attachments = []) {
Â  this.timeline.push({
Â  Â  status,
Â  Â  comment,
Â  Â  updatedBy,
Â  Â  timestamp: new Date(),
Â  Â  attachments
Â  });
Â  
Â  this.status = status;
Â  
Â  if (status === 'resolved') {
Â  Â  this.resolutionDate = new Date();
Â  Â  this.actualResolutionTime = Math.floor(
Â  Â  Â  (this.resolutionDate.getTime() - this.submissionDate.getTime()) / (1000 * 60 * 60 * 24)
Â  Â  );
Â  }
};

// Method to set resolution
grievanceSchema.methods.setResolution = function(description, actions, completedBy) {
Â  this.resolution = {
Â  Â  description,
Â  Â  actions,
Â  Â  completedBy,
Â  Â  completedAt: new Date(),
Â  Â  verificationRequired: this.priority === 'high' || this.severity === 'critical'
Â  };
Â  
Â  this.status = 'resolved';
Â  this.resolutionDate = new Date();
Â  this.actualResolutionTime = Math.floor(
Â  Â  (this.resolutionDate.getTime() - this.submissionDate.getTime()) / (1000 * 60 * 60 * 24)
Â  );
};

// Method to add feedback
grievanceSchema.methods.addFeedback = function(rating, comment) {
Â  this.feedback = {
Â  Â  rating,
Â  Â  comment,
Â  Â  submittedAt: new Date()
Â  };
Â  
Â  if (rating >= 4) {
Â  Â  this.status = 'closed';
Â  }
};

export default mongoose.model('Grievance', grievanceSchema);