import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

const userSchema = new mongoose.Schema({
Â  name: {
Â  Â  type: String,
Â  Â  required: [true, 'Please provide a name'],
Â  Â  trim: true,
Â  Â  maxlength: [50, 'Name cannot be more than 50 characters']
Â  },
Â  email: {
Â  Â  type: String,
Â  Â  required: [true, 'Please provide an email'],
Â  Â  unique: true,
Â  Â  lowercase: true,
    match: [/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i, 'Please provide a valid email']
Â  },
Â  phone: {
Â  Â  type: String,
Â  Â  required: [true, 'Please provide a phone number'],
Â  Â  unique: true,
Â  Â  match: [/^[6-9]\d{9}$/, 'Please provide a valid 10-digit phone number']
Â  },
Â  password: {
Â  Â  type: String,
Â  Â  required: [true, 'Please provide a password'],
Â  Â  minlength: [6, 'Password must be at least 6 characters'],
Â  Â  select: false
Â  },
Â  role: {
Â  Â  type: String,
Â  Â  enum: ['citizen', 'admin', 'staff'],
Â  Â  default: 'citizen'
Â  },
  isVerified: {
    type: Boolean,
    default: true
  },
  address: {
    type: String,
    required: [true, 'Please provide an address']
  },
Â  aadhaarNumber: {
Â  Â  type: String,
Â  Â  match: [/^\d{12}$/, 'Please provide a valid 12-digit Aadhaar number']
Â  },
Â  avatar: {
Â  Â  type: String,
Â  Â  default: ''
Â  },
Â  preferences: {
Â  Â  language: {
Â  Â  Â  type: String,
Â  Â  Â  enum: ['en', 'hi'],
Â  Â  Â  default: 'en'
Â  Â  },
Â  Â  notifications: {
Â  Â  Â  email: { type: Boolean, default: true },
Â  Â  Â  sms: { type: Boolean, default: true }
Â  Â  }
Â  },
Â  lastLogin: Date,
Â  lastLogout: Date,
Â  isActive: {
Â  Â  type: Boolean,
Â  Â  default: true
Â  }
}, {
Â  timestamps: true
});

// Index for better performance
userSchema.index({ email: 1 });
userSchema.index({ phone: 1 });
userSchema.index({ aadhaarNumber: 1 });

// Hash password before saving
userSchema.pre('save', async function(next) {
Â  if (!this.isModified('password')) return next();
Â  
Â  try {
Â  Â  const salt = await bcrypt.genSalt(12);
Â  Â  this.password = await bcrypt.hash(this.password, salt);
Â  Â  next();
Â  } catch (error) {
Â  Â  next(error);
Â  }
});

// Compare password method
userSchema.methods.comparePassword = async function(candidatePassword) {
Â  return await bcrypt.compare(candidatePassword, this.password);
};

// Generate JWT token
userSchema.methods.generateAuthToken = function() {
Â  return jwt.sign(
Â  Â  { 
Â  Â  Â  id: this._id, 
Â  Â  Â  role: this.role,
Â  Â  Â  isVerified: this.isVerified 
Â  Â  },
Â  Â  process.env.JWT_SECRET,
Â  Â  { expiresIn: process.env.JWT_EXPIRE || '7d' }
Â  );
};


// Remove sensitive data from JSON output
userSchema.methods.toJSON = function() {
  const user = this.toObject();
  delete user.password;
  return user;
};

// ðŸŒŸ ES Module export
export default mongoose.model('User', userSchema);
