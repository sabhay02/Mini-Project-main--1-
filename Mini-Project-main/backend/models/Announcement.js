const mongoose = require('mongoose');

// Helper function to generate a unique ID portion (safer than relying on count)
function generateUniqueIdPortion(prefix) {
    const timestamp = Date.now().toString(36).slice(-5); // Last 5 chars of timestamp
    const randomPart = Math.random().toString(36).substring(2, 6); // 4 random chars
    return `${prefix}-${timestamp}${randomPart}`.toUpperCase();
}

const announcementSchema = new mongoose.Schema({
Â  announcementId: {
Â  Â  type: String,
Â  Â  unique: true,
Â  Â  required: true
Â  },
Â  title: {
Â  Â  type: String,
Â  Â  required: [true, 'Please provide announcement title'],
Â  Â  trim: true,
Â  Â  maxlength: [200, 'Title cannot be more than 200 characters']
Â  },
Â  titleHindi: {
Â  Â  type: String,
Â  Â  trim: true,
Â  Â  maxlength: [200, 'Title in Hindi cannot be more than 200 characters']
Â  },
Â  content: {
Â  Â  type: String,
Â  Â  required: [true, 'Please provide announcement content'],
Â  Â  trim: true,
Â  Â  maxlength: [5000, 'Content cannot be more than 5000 characters']
Â  },
Â  contentHindi: {
Â  Â  type: String,
Â  Â  trim: true,
Â  Â  maxlength: [5000, 'Content in Hindi cannot be more than 5000 characters']
Â  },
Â  type: {
Â  Â  type: String,
Â  Â  required: [true, 'Please specify announcement type'],
Â  Â  enum: [
Â  Â  Â  'general',
Â  Â  Â  'scheme_launch',
Â  Â  Â  'deadline_reminder',
Â  Â  Â  'policy_update',
Â  Â  Â  'event_notification',
Â  Â  Â  'emergency',
Â  Â  Â  'maintenance',
Â  Â  Â  'holiday',
Â  Â  Â  'other'
Â  Â  ]
Â  },
Â  priority: {
Â  Â  type: String,
Â  Â  enum: ['low', 'medium', 'high', 'urgent'],
Â  Â  default: 'medium'
Â  },
Â  category: {
Â  Â  type: String,
Â  Â  enum: [
Â  Â  Â  'schemes',
Â  Â  Â  'services',
Â  Â  Â  'events',
Â  Â  Â  'deadlines',
Â  Â  Â  'maintenance',
Â  Â  Â  'policy',
Â  Â  Â  'emergency',
Â  Â  Â  'general'
Â  Â  ],
Â  Â  default: 'general'
Â  },
Â  targetAudience: {
Â  Â  type: String,
Â  Â  enum: ['all', 'citizens', 'staff', 'specific_group'],
Â  Â  default: 'all'
Â  },
Â  specificGroups: [String], // For targetAudience: 'specific_group'
Â  locations: {
Â  Â  states: [String],
Â  Â  districts: [String],
Â  Â  villages: [String]
Â  },
Â  attachments: [{
Â  Â  name: String,
Â  Â  url: String,
Â  Â  type: String,
Â  Â  size: Number
Â  }],
Â  image: String,
Â  status: {
Â  Â  type: String,
Â  Â  enum: ['draft', 'published', 'archived', 'expired'],
Â  Â  default: 'draft'
Â  },
Â  publishDate: {
Â  Â  type: Date,
Â  Â  default: Date.now
Â  },
Â  expiryDate: Date,
Â  isActive: {
Â  Â  type: Boolean,
Â  Â  default: true
Â  },
Â  featured: {
Â  Â  type: Boolean,
Â  Â  default: false
Â  },
Â  pinned: {
Â  Â  type: Boolean,
Â  Â  default: false
Â  },
Â  tags: [String],
Â  language: {
Â  Â  type: String,
Â  Â  enum: ['en', 'hi', 'both'],
Â  Â  default: 'both'
Â  },
Â  author: {
Â  Â  type: mongoose.Schema.Types.ObjectId,
Â  Â  ref: 'User',
Â  Â  required: true
Â  },
Â  approvedBy: {
Â  Â  type: mongoose.Schema.Types.ObjectId,
Â  Â  ref: 'User'
Â  },
Â  approvalStatus: {
Â  Â  type: String,
Â  Â  enum: ['pending', 'approved', 'rejected'],
Â  Â  default: 'pending'
Â  },
Â  approvalComments: String,
Â  views: {
Â  Â  type: Number,
Â  Â  default: 0
Â  },
Â  shares: {
Â  Â  type: Number,
Â  Â  default: 0
Â  },
Â  engagement: {
Â  Â  likes: {
Â  Â  Â  type: Number,
Â  Â  Â  default: 0
Â  Â  },
Â  Â  comments: {
Â  Â  Â  type: Number,
Â  Â  Â  default: 0
Â  Â  }
Â  },
Â  metadata: {
Â  Â  source: {
Â  Â  Â  type: String,
Â  Â  Â  enum: ['web', 'mobile', 'admin'],
Â  Â  Â  default: 'web'
Â  Â  },
Â  Â  ipAddress: String,
Â  Â  userAgent: String,
Â  Â  version: {
Â  Â  Â  type: Number,
Â  Â  Â  default: 1
Â  Â  }
Â  }
}, {
Â  timestamps: true
});

// Indexes for better performance
announcementSchema.index({ title: 'text', content: 'text', titleHindi: 'text', contentHindi: 'text' });
announcementSchema.index({ type: 1 });
announcementSchema.index({ priority: 1 });
announcementSchema.index({ category: 1 });
announcementSchema.index({ status: 1 });
announcementSchema.index({ publishDate: -1 });
announcementSchema.index({ featured: 1, pinned: 1 });
announcementSchema.index({ isActive: 1 });
announcementSchema.index({ tags: 1 });
announcementSchema.index({ author: 1 });

// ðŸŒŸ CORRECTION 1: Replace vulnerable ID generation with safer method
announcementSchema.pre('save', function(next) {
Â  if (this.isNew && !this.announcementId) {
    this.announcementId = generateUniqueIdPortion('ANN');
Â  }
  
  // ðŸŒŸ CORRECTION 2: Automatically set publishDate if status is changing to 'published'
  if (this.isModified('status') && this.status === 'published' && !this.publishDate) {
      this.publishDate = new Date();
      this.approvalStatus = 'approved'; // Assumes publishing implies approval
  }
  
Â  next();
});

// Virtual for type display
announcementSchema.virtual('typeDisplay').get(function() {
Â  const typeMap = {
Â  Â  'general': 'General',
Â  Â  'scheme_launch': 'Scheme Launch',
Â  Â  'deadline_reminder': 'Deadline Reminder',
Â  Â  'policy_update': 'Policy Update',
Â  Â  'event_notification': 'Event Notification',
Â  Â  'emergency': 'Emergency',
Â  Â  'maintenance': 'Maintenance',
Â  Â  'holiday': 'Holiday',
Â  Â  'other': 'Other'
Â  };
Â  return typeMap[this.type] || this.type;
});

// Virtual for priority display
announcementSchema.virtual('priorityDisplay').get(function() {
Â  const priorityMap = {
Â  Â  'low': 'Low',
Â  Â  'medium': 'Medium',
Â  Â  'high': 'High',
Â  Â  'urgent': 'Urgent'
Â  };
Â  return priorityMap[this.priority] || this.priority;
});

// Virtual for category display
announcementSchema.virtual('categoryDisplay').get(function() {
Â  const categoryMap = {
Â  Â  'schemes': 'Schemes',
Â  Â  'services': 'Services',
Â  Â  'events': 'Events',
Â  Â  'deadlines': 'Deadlines',
Â  Â  'maintenance': 'Maintenance',
Â  Â  'policy': 'Policy',
Â  Â  'emergency': 'Emergency',
Â  Â  'general': 'General'
Â  };
Â  return categoryMap[this.category] || this.category;
});

// Virtual for status display
announcementSchema.virtual('statusDisplay').get(function() {
Â  const statusMap = {
Â  Â  'draft': 'Draft',
Â  Â  'published': 'Published',
Â  Â  'archived': 'Archived',
Â  Â  'expired': 'Expired'
Â  };
Â  return statusMap[this.status] || this.status;
});

// Virtual for time since publication
announcementSchema.virtual('timeSincePublication').get(function() {
Â  if (!this.publishDate) return null;
Â  
Â  const now = new Date().getTime();
Â  const diffMs = now - this.publishDate.getTime();
Â  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
Â  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
Â  const diffMinutes = Math.floor(diffMs / (1000 * 60));
Â  
Â  if (diffDays > 0) {
Â  Â  return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
Â  } else if (diffHours > 0) {
Â  Â  return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
Â  } else if (diffMinutes > 0) {
Â  Â  return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;
Â  } else {
Â  Â  return 'Just now';
Â  }
});

// Virtual to check if announcement is expired
announcementSchema.virtual('isExpired').get(function() {
Â  if (!this.expiryDate) return false;
Â  return new Date().getTime() > this.expiryDate.getTime();
});

// Method to increment views
announcementSchema.methods.incrementViews = function() {
Â  this.views += 1;
Â  return this.save();
};

// Method to increment shares
announcementSchema.methods.incrementShares = function() {
Â  this.shares += 1;
Â  return this.save();
};

// Method to increment engagement
announcementSchema.methods.incrementEngagement = function(type) {
Â  if (type === 'like') {
Â  Â  this.engagement.likes += 1;
Â  } else if (type === 'comment') {
Â  Â  this.engagement.comments += 1;
Â  }
Â  return this.save();
};

// Method to publish announcement
announcementSchema.methods.publish = function() {
Â  this.status = 'published';
  // Only update publishDate if it hasn't been set, or is currently in the future (scheduled publish logic)
Â  if (!this.publishDate || this.publishDate.getTime() > new Date().getTime()) {
      this.publishDate = new Date();
  }
Â  this.approvalStatus = 'approved';
  this.isActive = true;
};

// Method to archive announcement
announcementSchema.methods.archive = function() {
Â  this.status = 'archived';
Â  this.isActive = false;
};

// Static method to get featured announcements
announcementSchema.statics.getFeatured = function(limit = 5) {
Â  return this.find({
Â  Â  status: 'published',
Â  Â  isActive: true,
Â  Â  featured: true,
Â  Â  $or: [
Â  Â  Â  { expiryDate: { $exists: false } },
Â  Â  Â  { expiryDate: { $gt: new Date() } }
Â  Â  ]
Â  })
Â  .sort({ priority: -1, publishDate: -1 })
Â  .limit(limit);
};

// Static method to get recent announcements
announcementSchema.statics.getRecent = function(limit = 10, category = null) {
Â  const query = {
Â  Â  status: 'published',
Â  Â  isActive: true,
Â  Â  $or: [
Â  Â  Â  { expiryDate: { $exists: false } },
Â  Â  Â  { expiryDate: { $gt: new Date() } }
Â  Â  ]
Â  };
Â  
Â  if (category) {
Â  Â  query.category = category;
Â  }
Â  
Â  return this.find(query)
Â  .sort({ pinned: -1, priority: -1, publishDate: -1 })
Â  .limit(limit);
};

module.exports = mongoose.model('Announcement', announcementSchema);