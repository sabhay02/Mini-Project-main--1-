const mongoose = require('mongoose');

// Helper function to generate a unique ID portion (safer than relying on count)
function generateUniqueIdPortion(prefix) {
    const timestamp = Date.now().toString(36).slice(-4); // Last 4 chars of timestamp
    const randomPart = Math.random().toString(36).substring(2, 6); // 4 random chars
    return `${prefix}-${timestamp}${randomPart}`.toUpperCase();
}

const schemeSchema = new mongoose.Schema({
Â  schemeId: {
Â  Â  type: String,
Â  Â  unique: true,
Â  Â  required: true
Â  },
Â  name: {
Â  Â  type: String,
Â  Â  required: [true, 'Please provide scheme name'],
Â  Â  trim: true,
Â  Â  maxlength: [200, 'Scheme name cannot be more than 200 characters']
Â  },
Â  nameHindi: {
Â  Â  type: String,
Â  Â  trim: true,
Â  Â  maxlength: [200, 'Scheme name in Hindi cannot be more than 200 characters']
Â  },
Â  description: {
Â  Â  type: String,
Â  Â  required: [true, 'Please provide scheme description'],
Â  Â  trim: true,
Â  Â  maxlength: [5000, 'Description cannot be more than 5000 characters']
Â  },
Â  descriptionHindi: {
Â  Â  type: String,
Â  Â  trim: true,
Â  Â  maxlength: [5000, 'Description in Hindi cannot be more than 5000 characters']
Â  },
Â  category: {
Â  Â  type: String,
Â  Â  required: [true, 'Please specify scheme category'],
Â  Â  enum: [
Â  Â  Â  'agriculture',
Â  Â  Â  'education',
Â  Â  Â  'healthcare',
Â  Â  Â  'housing',
Â  Â  Â  'employment',
Â  Â  Â  'women_welfare',
Â  Â  Â  'senior_citizens',
Â  Â  Â  'disabled_welfare',
Â  Â  Â  'social_security',
Â  Â  Â  'infrastructure',
Â  Â  Â  'environment',
Â  Â  Â  'other'
Â  Â  ]
Â  },
Â  subCategory: [String],
Â  department: {
Â  Â  type: String,
Â  Â  required: [true, 'Please specify department'],
Â  Â  enum: [
Â  Â  Â  'agriculture',
Â  Â  Â  'education',
Â  Â  Â  'health',
Â  Â  Â  'rural_development',
Â  Â  Â  'women_child_development',
Â  Â  Â  'social_justice',
Â  Â  Â  'labour',
Â  Â  Â  'housing',
Â  Â  Â  'finance',
Â  Â  Â  'other'
Â  Â  ]
Â  },
Â  ministry: {
Â  Â  type: String,
Â  Â  required: [true, 'Please specify ministry']
Â  },
Â  level: {
Â  Â  type: String,
Â  Â  enum: ['central', 'state', 'district', 'village'],
Â  Â  required: true
Â  },
Â  eligibility: {
Â  Â  ageRange: {
Â  Â  Â  min: Number,
Â  Â  Â  max: Number
Â  Â  },
Â  Â  incomeLimit: {
Â  Â  Â  type: Number,
Â  Â  Â  description: String
Â  Â  },
Â  Â  education: [String],
Â  Â  gender: {
Â  Â  Â  type: String,
Â  Â  Â  enum: ['all', 'male', 'female', 'other']
Â  Â  },
Â  Â  categories: [String], // SC, ST, OBC, General, etc.
Â  Â  location: {
Â  Â  Â  states: [String],
Â  Â  Â  districts: [String],
Â  Â  Â  villages: [String]
Â  Â  },
Â  Â  documents: [String],
Â  Â  other: [String]
Â  },
Â  benefits: {
Â  Â  type: {
Â  Â  Â  type: String,
Â  Â  Â  enum: ['monetary', 'non_monetary', 'both'],
Â  Â  Â  required: true
Â  Â  },
Â  Â  amount: {
Â  Â  Â  min: Number,
Â  Â  Â  max: Number,
Â  Â  Â  currency: {
Â  Â  Â  Â  type: String,
Â  Â  Â  Â  default: 'INR'
Â  Â  Â  }
Â  Â  },
Â  Â  description: String,
Â  Â  frequency: {
Â  Â  Â  type: String,
Â  Â  Â  enum: ['one_time', 'monthly', 'quarterly', 'yearly', 'other']
Â  Â  }
Â  },
Â  applicationProcess: {
Â  Â  online: {
Â  Â  Â  available: Boolean,
Â  Â  Â  portal: String,
Â  Â  Â  steps: [String]
Â  Â  },
Â  Â  offline: {
Â  Â  Â  available: Boolean,
Â  Â  Â  offices: [String],
Â  Â  Â  steps: [String]
Â  Â  },
Â  Â  documents: [String],
Â  Â  fees: {
Â  Â  Â  amount: Number,
Â  Â  Â  currency: String,
Â  Â  Â  description: String
Â  Â  },
Â  Â  processingTime: {
Â  Â  Â  days: Number, // in days
Â  Â  Â  description: String
Â  Â  }
Â  },
Â  status: {
Â  Â  type: String,
Â  Â  enum: ['active', 'inactive', 'suspended', 'discontinued'],
Â  Â  default: 'active'
Â  },
Â  launchDate: Date,
Â  endDate: Date,
Â  lastUpdated: Date,
Â  contactInfo: {
Â  Â  helpline: String,
Â  Â  email: String,
Â  Â  website: String,
Â  Â  offices: [{
Â  Â  Â  name: String,
Â  Â  Â  address: String,
Â  Â  Â  phone: String,
Â  Â  Â  email: String
Â  Â  }]
Â  },
Â  statistics: {
Â  Â  totalApplications: {
Â  Â  Â  type: Number,
Â  Â  Â  default: 0
Â  Â  },
Â  Â  approvedApplications: {
Â  Â  Â  type: Number,
Â  Â  Â  default: 0
Â  Â  },
Â  Â  rejectedApplications: {
Â  Â  Â  type: Number,
Â  Â  Â  default: 0
Â  Â  },
Â  Â  pendingApplications: {
Â  Â  Â  type: Number,
Â  Â  Â  default: 0
Â  Â  }
Â  },
Â  tags: [String],
Â  languages: [String],
Â  featured: {
Â  Â  type: Boolean,
Â  Â  default: false
Â  },
Â  priority: {
Â  Â  type: Number,
Â  Â  default: 0
Â  },
Â  image: String,
Â  attachments: [{
Â  Â  name: String,
Â  Â  url: String,
Â  Â  type: String
Â  }],
Â  metadata: {
Â  Â  createdBy: {
Â  Â  Â  type: mongoose.Schema.Types.ObjectId,
Â  Â  Â  ref: 'User'
Â  Â  },
Â  Â  lastModifiedBy: {
Â  Â  Â  type: mongoose.Schema.Types.ObjectId,
Â  Â  Â  ref: 'User'
Â  Â  },
Â  Â  source: String,
Â  Â  version: {
Â  Â  Â  type: Number,
Â  Â  Â  default: 1
Â  Â  }
Â  }
}, {
Â  timestamps: true
});

// Indexes for better performance
schemeSchema.index({ name: 'text', description: 'text', nameHindi: 'text', descriptionHindi: 'text' });
schemeSchema.index({ category: 1 });
schemeSchema.index({ department: 1 });
schemeSchema.index({ level: 1 });
schemeSchema.index({ status: 1 });
schemeSchema.index({ featured: 1 });
schemeSchema.index({ priority: -1 });
schemeSchema.index({ tags: 1 });

// ðŸŒŸ CORRECTION 1: Replace vulnerable ID generation logic with safer method
schemeSchema.pre('save', function(next) {
Â  if (this.isNew && !this.schemeId) {
Â  Â  // Generate a unique ID using a random hash/timestamp to avoid race conditions
Â  Â  this.schemeId = generateUniqueIdPortion('SCH');
Â  }
Â  next();
});

// Update lastUpdated on save
schemeSchema.pre('save', function(next) {
    if (this.isModified()) {
        this.lastUpdated = new Date();
    }
Â  next();
});

// ðŸŒŸ CORRECTION 2: Dedicated method for accurate age calculation
schemeSchema.methods._calculateAge = function(dateOfBirth) {
    const birthDate = new Date(dateOfBirth);
    
    if (isNaN(birthDate.getTime())) {
        return null; // Invalid date
    }
    
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    // Adjust age if birthday hasn't passed this year
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }
    return age;
};


// Virtual for category display
schemeSchema.virtual('categoryDisplay').get(function() {
Â  const categoryMap = {
Â  Â  'agriculture': 'Agriculture',
Â  Â  'education': 'Education',
Â  Â  'healthcare': 'Healthcare',
Â  Â  'housing': 'Housing',
Â  Â  'employment': 'Employment',
Â  Â  'women_welfare': 'Women Welfare',
Â  Â  'senior_citizens': 'Senior Citizens',
Â  Â  'disabled_welfare': 'Disabled Welfare',
Â  Â  'social_security': 'Social Security',
Â  Â  'infrastructure': 'Infrastructure',
Â  Â  'environment': 'Environment',
Â  Â  'other': 'Other'
Â  };
Â  return categoryMap[this.category] || this.category;
});

// Virtual for status display
schemeSchema.virtual('statusDisplay').get(function() {
Â  const statusMap = {
Â  Â  'active': 'Active',
Â  Â  'inactive': 'Inactive',
Â  Â  'suspended': 'Suspended',
Â  Â  'discontinued': 'Discontinued'
Â  };
Â  return statusMap[this.status] || this.status;
});

// Method to check eligibility
schemeSchema.methods.checkEligibility = function(userData) {
Â  const eligibility = this.eligibility;
Â  const results = {
Â  Â  eligible: true,
Â  Â  reasons: []
Â  };
  
Â  // Check age
Â  if (eligibility.ageRange && userData.dateOfBirth) {
Â  Â  const userAge = this._calculateAge(userData.dateOfBirth);
    
    if (userAge === null) {
        results.eligible = false;
        results.reasons.push('Invalid Date of Birth provided for age check.');
    } else if (userAge < eligibility.ageRange.min || userAge > eligibility.ageRange.max) {
Â  Â  Â  results.eligible = false;
Â  Â  Â  results.reasons.push(`Age must be between ${eligibility.ageRange.min} and ${eligibility.ageRange.max} years`);
Â  Â  }
Â  }

Â  // Check income
Â  if (eligibility.incomeLimit && userData.income !== undefined && userData.income > eligibility.incomeLimit) {
Â  Â  results.eligible = false;
Â  Â  results.reasons.push(`Annual income must be less than â‚¹${eligibility.incomeLimit}`);
Â  }

Â  // Check gender (Ensure case-insensitive comparison for user input)
Â  if (eligibility.gender && eligibility.gender !== 'all' && userData.gender) {
    if (userData.gender.toLowerCase() !== eligibility.gender.toLowerCase()) {
Â  Â      results.eligible = false;
Â  Â      results.reasons.push(`Scheme is only for ${eligibility.gender}s`);
    }
Â  }

Â  // Check location (States)
Â  if (eligibility.location) {
Â  Â  if (eligibility.location.states && eligibility.location.states.length > 0 && userData.state) {
Â  Â  Â  if (!eligibility.location.states.includes(userData.state)) {
Â  Â  Â  Â  results.eligible = false;
Â  Â  Â  Â  results.reasons.push(`Scheme is only available in ${eligibility.location.states.join(', ')}`);
Â  Â  Â  }
Â  Â  }
    // Add check for Districts for completeness
    if (eligibility.location.districts && eligibility.location.districts.length > 0 && userData.district) {
        if (!eligibility.location.districts.includes(userData.district)) {
            results.eligible = false;
            results.reasons.push(`Scheme is not available in district ${userData.district}`);
        }
    }
Â  }
  
  // Final check based on reasons collected
  if (results.reasons.length > 0) {
      results.eligible = false;
  } else {
      results.eligible = true;
  }
  
Â  return results;
};

// Method to update statistics
schemeSchema.methods.updateStatistics = function(type, increment = 1) {
Â  if (type === 'application') {
Â  Â  this.statistics.totalApplications += increment;
Â  } else if (type === 'approved') {
Â  Â  this.statistics.approvedApplications += increment;
Â  } else if (type === 'rejected') {
Â  Â  this.statistics.rejectedApplications += increment;
Â  } else if (type === 'pending') {
Â  Â  this.statistics.pendingApplications += increment;
Â  }
};

// Static method to search schemes
schemeSchema.statics.searchSchemes = function(query, filters = {}) {
Â  const searchQuery = {
Â  Â  status: 'active',
Â  Â  ...filters
Â  };

Â  if (query) {
Â  Â  searchQuery.$text = { $search: query };
Â  }

Â  return this.find(searchQuery, { score: { $meta: 'textScore' } })
Â  Â  .sort({ score: { $meta: 'textScore' }, priority: -1, createdAt: -1 });
};

module.exports = mongoose.model('Scheme', schemeSchema);