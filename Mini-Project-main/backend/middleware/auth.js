const jwt = require('jsonwebtoken');
const User = require('../models/User');

// ðŸŒŸ CORRECTION/IMPROVEMENT: Import dependent models at the top
const Application = require('../models/Application');
const Grievance = require('../models/Grievance');

// Protect routes - verify JWT token
const protect = async (req, res, next) => {
Â  let token;

Â  // Get token from header
Â  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
Â  Â  try {
Â  Â  Â  // Get token from header
Â  Â  Â  token = req.headers.authorization.split(' ')[1];

Â  Â  Â  // Verify token
Â  Â  Â  const decoded = jwt.verify(token, process.env.JWT_SECRET);

Â  Â  Â  // Get user from token
Â  Â  Â  req.user = await User.findById(decoded.id).select('-password');

Â  Â  Â  if (!req.user) {
Â  Â  Â  Â  return res.status(401).json({
Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  message: 'Not authorized, user not found'
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  if (!req.user.isActive) {
Â  Â  Â  Â  return res.status(401).json({
Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  message: 'Account is deactivated'
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  next();
Â  Â  } catch (error) {
Â  Â  Â  console.error('Auth middleware error:', error.message);
Â  Â  Â  return res.status(401).json({
Â  Â  Â  Â  success: false,
Â  Â  Â  Â  message: 'Not authorized, token failed'
Â  Â  Â  });
Â  Â  }
Â  } else if (!token) { // Use else if to avoid double response
Â  Â  return res.status(401).json({
Â  Â  Â  success: false,
Â  Â  Â  message: 'Not authorized, no token'
Â  Â  });
Â  }
};

// Grant access to specific roles
const authorize = (...roles) => {
Â  return (req, res, next) => {
Â  Â  if (!req.user) {
Â  Â  Â  return res.status(401).json({
Â  Â  Â  Â  success: false,
Â  Â  Â  Â  message: 'Not authorized, please login'
Â  Â  Â  });
Â  Â  }

Â  Â  if (!roles.includes(req.user.role)) {
Â  Â  Â  return res.status(403).json({
Â  Â  Â  Â  success: false,
Â  Â  Â  Â  message: `User role ${req.user.role} is not authorized to access this route`
Â  Â  Â  });
Â  Â  }

Â  Â  next();
Â  };
};

// Check if user is verified
const requireVerification = (req, res, next) => {
Â  if (!req.user.isVerified) {
Â  Â  return res.status(403).json({
Â  Â  Â  success: false,
Â  Â  Â  message: 'Please verify your account before accessing this resource'
Â  Â  });
Â  }
Â  next();
};

// Optional authentication - doesn't fail if no token
const optionalAuth = async (req, res, next) => {
Â  let token;

Â  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
Â  Â  try {
Â  Â  Â  token = req.headers.authorization.split(' ')[1];
Â  Â  Â  const decoded = jwt.verify(token, process.env.JWT_SECRET);
Â  Â  Â  req.user = await User.findById(decoded.id).select('-password');
Â  Â  } catch (error) {
Â  Â  Â  // If token fails validation, clear user and proceed
Â  Â  Â  req.user = null;
Â  Â  }
Â  } else {
    // If no token, clear user and proceed
    req.user = null;
  }

Â  next();
};

// Rate limiting for sensitive operations
const sensitiveOperationLimit = (req, res, next) => {
Â  // This is a placeholder. In a production environment, implement proper rate limiting
Â  // using a library like 'express-rate-limit' or Redis.
Â  next();
};

// Check if user can access resource (Authorization: User owns resource)
const checkResourceAccess = (resourceType) => {
Â  return async (req, res, next) => {
Â  Â  try {
Â  Â  Â  const resourceId = req.params.id || req.params.applicationId || req.params.grievanceId;

Â  Â  Â  if (!req.user) {
         // Should not happen if 'protect' is used before this middleware, but safe to check.
        return res.status(401).json({ success: false, message: 'Authentication required' });
      }

Â  Â  Â  if (!resourceId) {
Â  Â  Â  Â  return res.status(400).json({
Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  message: 'Resource ID is required'
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  // For admin/staff users, allow access to all resources
Â  Â  Â  if (req.user.role === 'admin' || req.user.role === 'staff') {
Â  Â  Â  Â  return next();
Â  Â  Â  }

Â  Â  Â  // For citizen users, check if they own the resource
Â  Â  Â  let resource;
Â  Â  Â  switch (resourceType) {
Â  Â  Â  Â  case 'application':
             // ðŸŒŸ CORRECTION: Use imported Application model
Â  Â  Â  Â  Â  Â  resource = await Application.findById(resourceId);
Â  Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  case 'grievance':
             // ðŸŒŸ CORRECTION: Use imported Grievance model
Â  Â  Â  Â  Â  Â  resource = await Grievance.findById(resourceId);
Â  Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  default:
Â  Â  Â  Â  Â  Â  return res.status(400).json({
Â  Â  Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  Â  Â  message: 'Invalid resource type'
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  if (!resource) {
Â  Â  Â  Â  return res.status(404).json({
Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  message: 'Resource not found'
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  // Check if user owns the resource (Must convert to string for proper ObjectId comparison)
Â  Â  Â  if (resource.user.toString() !== req.user._id.toString()) {
Â  Â  Â  Â  return res.status(403).json({
Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  message: 'Not authorized to access this resource'
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  req.resource = resource;
Â  Â  Â  next();
Â  Â  } catch (error) {
Â  Â  Â  console.error('Resource access check error:', error);
Â  Â  Â  // Catching common errors like invalid ObjectId format (CastError)
Â  Â  Â  const statusCode = error.name === 'CastError' ? 400 : 500;
Â  Â  Â  return res.status(statusCode).json({
Â  Â  Â  Â  success: false,
Â  Â  Â  Â  message: 'Error checking resource access',
        error: error.name === 'CastError' ? 'Invalid Resource ID format' : error.message
Â  Â  Â  });
Â  Â  }
Â  };
};

// Validate user permissions for admin operations (Placeholder for granular RBAC)
const validateAdminPermissions = (requiredPermissions = []) => {
Â  return (req, res, next) => {
Â  Â  if (req.user.role !== 'admin') {
Â  Â  Â  return res.status(403).json({
Â  Â  Â  Â  success: false,
Â  Â  Â  Â  message: 'Admin access required'
Â  Â  Â  });
Â  Â  }

Â  Â  // Logic for checking specific permissions (e.g., if admin has 'can_edit_schemes') 
    // would be implemented here using `requiredPermissions`.
    
Â  Â  next();
Â  };
};

module.exports = {
Â  protect,
Â  authorize,
Â  requireVerification,
Â  optionalAuth,
Â  sensitiveOperationLimit,
Â  checkResourceAccess,
Â  validateAdminPermissions
};