import { body, param, query, validationResult } from 'express-validator';

// Handle validation errors
const handleValidationErrors = (req, res, next) => {
Â  const errors = validationResult(req);
Â  if (!errors.isEmpty()) {
Â  Â  return res.status(400).json({
Â  Â  Â  success: false,
Â  Â  Â  message: 'Validation failed',
Â  Â  Â  errors: errors.array()
Â  Â  });
Â  }
Â  next();
};

// User registration validation
const validateUserRegistration = [
Â  body('name')
Â  Â  .trim()
Â  Â  .isLength({ min: 2, max: 50 })
Â  Â  .withMessage('Name must be between 2 and 50 characters'),
Â  
Â  body('email')
Â  Â  .isEmail()
Â  Â  .normalizeEmail()
Â  Â  .withMessage('Please provide a valid email'),
Â  
Â  body('phone')
Â  Â  .matches(/^[6-9]\d{9}$/)
Â  Â  .withMessage('Please provide a valid 10-digit phone number'),
Â  
Â  body('password')
Â  Â  .isLength({ min: 6 })
Â  Â  .withMessage('Password must be at least 6 characters long'),
Â  
Â  body('confirmPassword')
Â  Â  .custom((value, { req }) => {
Â  Â  Â  if (value !== req.body.password) {
Â  Â  Â  Â  throw new Error('Password confirmation does not match password');
Â  Â  Â  }
Â  Â  Â  return true;
Â  Â  }),
Â  
Â  body('address')
Â  Â  .trim()
Â  Â  .isLength({ min: 10, max: 500 })
Â  Â  .withMessage('Address must be between 10 and 500 characters'),
Â  
Â  handleValidationErrors
];

// User login validation
const validateUserLogin = [
Â  body('email')
Â  Â  .isEmail()
Â  Â  .normalizeEmail()
Â  Â  .withMessage('Please provide a valid email'),
Â  
Â  body('password')
Â  Â  .notEmpty()
Â  Â  .withMessage('Password is required'),
Â  
Â  handleValidationErrors
];


// Application submission validation
const validateApplicationSubmission = [
Â  body('type')
Â  Â  .trim()
Â  Â  .isLength({ min: 1, max: 100 })
Â  Â  .withMessage('Application type is required and must be between 1 and 100 characters'),
Â  
Â  body('title')
Â  Â  .trim()
Â  Â  .isLength({ min: 5, max: 100 })
Â  Â  .withMessage('Title must be between 5 and 100 characters'),
Â  
Â  body('description')
Â  Â  .trim()
Â  Â  .isLength({ min: 10, max: 1000 })
Â  Â  .withMessage('Description must be between 10 and 1000 characters'),
Â  
Â  body('personalDetails.name')
Â  Â  .trim()
Â  Â  .isLength({ min: 2, max: 50 })
Â  Â  .withMessage('Name must be between 2 and 50 characters'),
Â  
Â  body('personalDetails.dateOfBirth')
Â  Â  .isISO8601()
Â  Â  .withMessage('Please provide a valid date of birth'),
Â  
Â  body('personalDetails.gender')
Â  Â  .isIn(['male', 'female', 'other'])
Â  Â  .withMessage('Please select a valid gender'),
Â  
Â  handleValidationErrors
];

// Grievance submission validation
const validateGrievanceSubmission = [
Â  body('category')
Â  Â  .isIn([
Â  Â  Â  'water_supply',
Â  Â  Â  'electricity',
Â  Â  Â  'road_repair',
Â  Â  Â  'street_lights',
Â  Â  Â  'drainage',
Â  Â  Â  'garbage_collection',
Â  Â  Â  'healthcare',
Â  Â  Â  'education',
Â  Â  Â  'corruption',
Â  Â  Â  'other'
Â  Â  ])
Â  Â  .withMessage('Invalid grievance category'),
Â  
Â  body('title')
Â  Â  .trim()
Â  Â  .isLength({ min: 5, max: 100 })
Â  Â  .withMessage('Title must be between 5 and 100 characters'),
Â  
Â  body('description')
Â  Â  .trim()
Â  Â  .isLength({ min: 10, max: 2000 })
Â  Â  .withMessage('Description must be between 10 and 2000 characters'),
Â  
Â  body('priority')
Â  Â  .optional()
Â  Â  .isIn(['low', 'medium', 'high', 'urgent'])
Â  Â  .withMessage('Invalid priority level'),
Â  
Â  body('location.address')
Â  Â  .trim()
Â  Â  .isLength({ min: 5, max: 200 })
Â  Â  .withMessage('Address must be between 5 and 200 characters'),
Â  
Â  handleValidationErrors
];

// Scheme search validation
const validateSchemeSearch = [
Â  query('q')
Â  Â  .optional()
Â  Â  .trim()
Â  Â  .isLength({ min: 1, max: 100 })
Â  Â  .withMessage('Search query must be between 1 and 100 characters'),
Â  
Â  query('category')
Â  Â  .optional()
Â  Â  .isIn([
Â  Â  Â  'agriculture',
Â  Â  Â  'education',
Â  Â  Â  'healthcare',
Â  Â  Â  'housing',
Â  Â  Â  'employment',
Â  Â  Â  'women_welfare',
Â  Â  Â  'senior_citizens',
Â  Â  Â  'disabled_welfare',
Â  Â  Â  'social_security',
Â  Â  Â  'infrastructure',
Â  Â  Â  'environment',
Â  Â  Â  'other'
Â  Â  ])
Â  Â  .withMessage('Invalid category'),
Â  
Â  query('department')
Â  Â  .optional()
Â  Â  .isIn([
Â  Â  Â  'agriculture',
Â  Â  Â  'education',
Â  Â  Â  'health',
Â  Â  Â  'rural_development',
Â  Â  Â  'women_child_development',
Â  Â  Â  'social_justice',
Â  Â  Â  'labour',
Â  Â  Â  'housing',
Â  Â  Â  'finance',
Â  Â  Â  'other'
Â  Â  ])
Â  Â  .withMessage('Invalid department'),
Â  
Â  query('level')
Â  Â  .optional()
Â  Â  .isIn(['central', 'state', 'district', 'village'])
Â  Â  .withMessage('Invalid level'),
Â  
Â  query('page')
Â  Â  .optional()
Â  Â  .isInt({ min: 1 })
Â  Â  .withMessage('Page must be a positive integer'),
Â  
Â  query('limit')
Â  Â  .optional()
Â  Â  .isInt({ min: 1, max: 100 })
Â  Â  .withMessage('Limit must be between 1 and 100'),
Â  
Â  handleValidationErrors
];

// Announcement validation
const validateAnnouncement = [
Â  body('title')
Â  Â  .trim()
Â  Â  .isLength({ min: 5, max: 200 })
Â  Â  .withMessage('Title must be between 5 and 200 characters'),
Â  
Â  body('content')
Â  Â  .trim()
Â  Â  .isLength({ min: 10, max: 5000 })
Â  Â  .withMessage('Content must be between 10 and 5000 characters'),
Â  
Â  body('type')
Â  Â  .isIn([
Â  Â  Â  'general',
Â  Â  Â  'scheme_launch',
Â  Â  Â  'deadline_reminder',
Â  Â  Â  'policy_update',
Â  Â  Â  'event_notification',
Â  Â  Â  'emergency',
Â  Â  Â  'maintenance',
Â  Â  Â  'holiday',
Â  Â  Â  'other'
Â  Â  ])
Â  Â  .withMessage('Invalid announcement type'),
Â  
Â  body('priority')
Â  Â  .optional()
Â  Â  .isIn(['low', 'medium', 'high', 'urgent'])
Â  Â  .withMessage('Invalid priority level'),
Â  
Â  body('category')
Â  Â  .optional()
Â  Â  .isIn([
Â  Â  Â  'schemes',
Â  Â  Â  'services',
Â  Â  Â  'events',
Â  Â  Â  'deadlines',
Â  Â  Â  'maintenance',
Â  Â  Â  'policy',
Â  Â  Â  'emergency',
Â  Â  Â  'general'
Â  Â  ])
Â  Â  .withMessage('Invalid category'),
Â  
Â  handleValidationErrors
];

// ðŸŒŸ SCHEME VALIDATION (Corrected Code) ðŸŒŸ

// Base checks for scheme creation/update fields
const validateSchemeBase = [
Â  Â  // Core details
Â  Â  body('name')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .trim()
Â  Â  Â  Â  .isLength({ min: 5, max: 200 })
Â  Â  Â  Â  .withMessage('Scheme name must be between 5 and 200 characters'),
Â  Â  body('description')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .trim()
Â  Â  Â  Â  .isLength({ min: 10, max: 5000 })
Â  Â  Â  Â  .withMessage('Description must be between 10 and 5000 characters'),
Â  Â  body('category')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isIn([
Â  Â  Â  Â  Â  Â  'agriculture', 'education', 'healthcare', 'housing', 'employment',
Â  Â  Â  Â  Â  Â  'women_welfare', 'senior_citizens', 'disabled_welfare', 'social_security',
Â  Â  Â  Â  Â  Â  'infrastructure', 'environment', 'other'
Â  Â  Â  Â  ])
Â  Â  Â  Â  .withMessage('Invalid scheme category'),
Â  Â  body('department')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isIn([
Â  Â  Â  Â  Â  Â  'agriculture', 'education', 'health', 'rural_development',
Â  Â  Â  Â  Â  Â  'women_child_development', 'social_justice', 'labour',
Â  Â  Â  Â  Â  Â  'housing', 'finance', 'other'
Â  Â  Â  Â  ])
Â  Â  Â  Â  .withMessage('Invalid scheme department'),
Â  Â  body('ministry')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .trim()
Â  Â  Â  Â  .isLength({ min: 2, max: 100 })
Â  Â  Â  Â  .withMessage('Ministry name must be between 2 and 100 characters'),
Â  Â  body('level')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isIn(['central', 'state', 'district', 'village'])
Â  Â  Â  Â  .withMessage('Invalid scheme level'),
Â  Â  body('status')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isIn(['active', 'inactive', 'suspended', 'discontinued'])
Â  Â  Â  Â  .withMessage('Invalid scheme status'),
Â  Â  
Â  Â  // Eligibility - Deep checks (optional, but validated if present)
Â  Â  body('eligibility.ageRange.min')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isInt({ min: 0, max: 120 })
Â  Â  Â  Â  .withMessage('Minimum age must be a valid integer between 0 and 120'),
Â  Â  body('eligibility.ageRange.max')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isInt({ min: 0, max: 120 })
Â  Â  Â  Â  .withMessage('Maximum age must be a valid integer between 0 and 120'),
Â  Â  
    // âœ… FIX APPLIED HERE: Validate the nested 'type' field which holds the number
Â  Â  body('eligibility.incomeLimit.type')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isInt({ min: 0 })
Â  Â  Â  Â  .withMessage('Income limit amount must be a non-negative integer'),
    // Also, validate the description field for the income limit object
    body('eligibility.incomeLimit.description')
        .optional()
        .trim()
        .isLength({ max: 200 })
        .withMessage('Income limit description cannot exceed 200 characters'),
        
Â  Â  body('eligibility.gender')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isIn(['all', 'male', 'female', 'other'])
Â  Â  Â  Â  .withMessage('Invalid gender eligibility'),

Â  Â  // Benefits - Deep checks
Â  Â  body('benefits.type')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isIn(['monetary', 'non_monetary', 'both'])
Â  Â  Â  Â  .withMessage('Invalid benefit type'),
Â  Â  body('benefits.amount.min')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isInt({ min: 0 })
Â  Â  Â  Â  .withMessage('Minimum benefit amount must be a non-negative integer'),
Â  Â  body('benefits.amount.max')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isInt({ min: 0 })
Â  Â  Â  Â  .withMessage('Maximum benefit amount must be a non-negative integer'),
Â  Â  
Â  Â  // Application Process - Online/Offline availability
Â  Â  body('applicationProcess.online.available')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isBoolean()
Â  Â  Â  Â  .withMessage('Online availability must be a boolean'),
Â  Â  body('applicationProcess.offline.available')
Â  Â  Â  Â  .optional()
Â  Â  Â  Â  .isBoolean()
Â  Â  Â  Â  .withMessage('Offline availability must be a boolean'),
];

// Validation for creating a new scheme (all core fields required)
const validateSchemeCreate = [
Â  Â  // Require core fields for creation
Â  Â  body('name').notEmpty().withMessage('Scheme name is required.'),
Â  Â  body('description').notEmpty().withMessage('Description is required.'),
Â  Â  body('category').notEmpty().withMessage('Category is required.'),
Â  Â  body('department').notEmpty().withMessage('Department is required.'),
Â  Â  body('ministry').notEmpty().withMessage('Ministry is required.'),
Â  Â  body('level').notEmpty().withMessage('Level is required.'),

Â  Â  // Ensure benefits type is present for a new scheme
Â  Â  body('benefits.type').notEmpty().withMessage('Benefit type is required for a new scheme.'),
Â  Â  
Â  Â  ...validateSchemeBase,
Â  Â  
Â  Â  handleValidationErrors
];

// Validation for updating an existing scheme (all fields optional, but validated if present)
const validateSchemeUpdate = [
Â  Â  // Check for ID parameter, although typically handled by the route's middleware, it's safer here.
Â  Â  param('id')
Â  Â  Â  Â  .isMongoId()
Â  Â  Â  Â  .withMessage('Invalid scheme ID format'),
Â  Â  
Â  Â  ...validateSchemeBase,

Â  Â  handleValidationErrors 
];

// ðŸŒŸ END OF SCHEME VALIDATION ðŸŒŸ

// ID parameter validation
const validateId = [
Â  param('id')
Â  Â  .isMongoId()
Â  Â  .withMessage('Invalid ID format'),
Â  
Â  handleValidationErrors
];

// Pagination validation
const validatePagination = [
Â  query('page')
Â  Â  .optional()
Â  Â  .isInt({ min: 1 })
Â  Â  .withMessage('Page must be a positive integer'),
Â  
Â  query('limit')
Â  Â  .optional()
Â  Â  .isInt({ min: 1, max: 100 })
Â  Â  .withMessage('Limit must be between 1 and 100'),
Â  
Â  handleValidationErrors
];

// Status update validation
const validateStatusUpdate = [
Â  body('status')
Â  Â  .isIn([
Â  Â  Â  'draft',
Â  Â  Â  'submitted',
Â  Â  Â  'under_review',
Â  Â  Â  'approved',
Â  Â  Â  'rejected',
Â  Â  Â  'completed',
Â  Â  Â  'open',
Â  Â  Â  'in_progress',
Â  Â  Â  'resolved',
Â  Â  Â  'closed'
Â  Â  ])
Â  Â  .withMessage('Invalid status'),
Â  
Â  body('comment')
Â  Â  .optional()
Â  Â  .trim()
Â  Â  .isLength({ max: 500 })
Â  Â  .withMessage('Comment cannot exceed 500 characters'),
Â  
Â  handleValidationErrors
];

// File upload validation
const validateFileUpload = (maxSize = 10 * 1024 * 1024, allowedTypes = ['image/jpeg', 'image/png', 'application/pdf']) => {
Â  return (req, res, next) => {
Â  Â  if (!req.files || req.files.length === 0) {
Â  Â  Â  return res.status(400).json({
Â  Â  Â  Â  success: false,
Â  Â  Â  Â  message: 'No files uploaded'
Â  Â  Â  });
Â  Â  }

Â  Â  const files = Array.isArray(req.files) ? req.files : [req.files];

Â  Â  for (const file of files) {
Â  Â  Â  // Check file size
Â  Â  Â  if (file.size > maxSize) {
Â  Â  Â  Â  return res.status(400).json({
Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  message: `File ${file.name} is too large. Maximum size is ${maxSize / (1024 * 1024)}MB`
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  // Check file type
Â  Â  Â  if (!allowedTypes.includes(file.mimetype)) {
Â  Â  Â  Â  return res.status(400).json({
Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  message: `File ${file.name} has an invalid type. Allowed types: ${allowedTypes.join(', ')}`
Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  }

Â  Â  next();
Â  };
};

// Sanitize input to prevent XSS
const sanitizeInput = (req, res, next) => {
Â  const sanitize = (obj) => {
Â  Â  if (typeof obj === 'string') {
Â  Â  Â  return obj.trim().replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
Â  Â  }
Â  Â  if (typeof obj === 'object' && obj !== null) {
Â  Â  Â  for (const key in obj) {
Â  Â  Â  Â  // Use hasOwnProperty to only iterate over own properties
Â  Â  Â  Â  if (Object.prototype.hasOwnProperty.call(obj, key)) { 
Â  Â  Â  Â  Â  if (typeof obj[key] === 'string') {
Â  Â  Â  Â  Â  Â  obj[key] = obj[key].trim().replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
Â  Â  Â  Â  Â  } else if (typeof obj[key] === 'object') {
Â  Â  Â  Â  Â  Â  sanitize(obj[key]);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  }
Â  Â  return obj;
Â  };

Â  if (req.body) {
Â  Â  req.body = sanitize(req.body);
Â  }
Â  if (req.query) {
Â  Â  req.query = sanitize(req.query);
Â  }

Â  next();
};

export {
Â  handleValidationErrors,
Â  validateUserRegistration,
Â  validateUserLogin,
Â  validateApplicationSubmission,
Â  validateGrievanceSubmission,
Â  validateSchemeSearch,
Â  validateAnnouncement,
Â  validateSchemeCreate,
Â  validateSchemeUpdate,
Â  validateId,
Â  validatePagination,
Â  validateStatusUpdate,
Â  validateFileUpload,
Â  sanitizeInput
};